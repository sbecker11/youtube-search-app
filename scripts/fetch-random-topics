#!/bin/bash

# Function to fetch 3 random trending topics, avoiding previously used ones
fetch_random_trending_topics() {
    local url="https://trends.google.com/trends/trendingsearches/daily/rss?geo=US"
    local prev_file="${1:-previous_trends.txt}"  # Optional file argument, default name
    
    # Fetch top 100 trending topics
    local topics
    topics=$(curl -s "$url" | xmllint --xpath "//item/title/text()" - 2>/dev/null | head -n 100)
    
    if [ -z "$topics" ]; then
        handle_error "Failed to fetch trends. Press any key..."
        return 1
    fi
    
    # Load previous topics from file if it exists
    local prev_topics=""
    if [ -f "$prev_file" ]; then
        prev_topics=$(cat "$prev_file")
    fi
    
    # Filter out previously used topics
    local filtered_topics=""
    while IFS= read -r topic; do
        # Check if topic is in prev_topics (case-insensitive match)
        if ! echo "$prev_topics" | grep -F -i -x -q "$topic"; then
            filtered_topics="$filtered_topics"$'\n'"$topic"
        fi
    done <<< "$topics"
    filtered_topics="${filtered_topics#$'\n'}"  # Remove leading newline
    
    if [ -z "$filtered_topics" ]; then
        handle_error "No new trends available after filtering. Press any key..."
        return 1
    fi
    
    # Pick 3 random topics from filtered list and append to file
    local selected
    selected=$(echo "$filtered_topics" | shuf -n 3)
    
    # Append new selections to the file
    echo "$selected" >> "$prev_file"
    
    # Output the selected topics
    echo "$selected"
}

# Your handle_error function
handle_error() {
    echo "$1"
    read -n 1
    echo
    return 1
}

# Call the function with optional file argument
echo "Fetching 3 random trending topics from the top 100 (avoiding repeats)..."
fetch_random_trending_topics "my_previous_trends.txt" || exit 1
